{"version":3,"sources":["InfoBox.js","utils.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sort","x","y","prettyPrintStat","stat","numeral","format","ShowDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casestype","lastDataPoint","chartData","date","console","log","newDatapoint","push","LineGraph","useState","setData","useEffect","fetchData","a","fetch","then","response","json","length","datasets","backgroundColor","fill","borderColor","App","setCountries","setCountry","setcountryInfo","tableData","setTableData","mapCountries","setMapCountries","lng","mapcenter","setMapCenter","mapZoom","setMapzoom","setCaseType","res","getCountriesData","name","iso2","sortedData","onCountryChange","event","countrycode","target","FormControl","Select","variant","onChange","MenuItem","_e","todayCases","todayDeaths","todayRecovered","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e969ecca.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport \"./InfoBox.css\";\r\nexport default function InfoBox({\r\n  title,\r\n  cases,\r\n  isRed,\r\n  active,\r\n  total,\r\n  ...props\r\n}) {\r\n  return (\r\n    <div>\r\n      <Card\r\n        onClick={props.onClick}\r\n        className={`infoBox ${active && \"infoBox--selected\"}\r\n      ${isRed && \"infoBox--red\"} `}\r\n      >\r\n        <CardContent>\r\n          {/* Title*/}\r\n\r\n          <Typography className=\"infoBox_title\" color=\"textSecondary\">\r\n            {title}\r\n          </Typography>\r\n\r\n          {/* no of cases*/}\r\n          <h2 className={`infoBox_cases ${!isRed && \"infoBox_cases--green\"}`}>\r\n            {cases}\r\n          </h2>\r\n          <Typography className=\"infoBox_total\" color=\"textSecondary\">\r\n            {total}Total\r\n          </Typography>\r\n          {/* total*/}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier:400,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier:1000,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier:800,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n  return sortedData.sort((x, y) => (x.cases > y.cases ? -1 : 1));\r\n};\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n//circles on the map with interactive tooltip\r\nexport const ShowDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          />\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases:{numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recoverd:{numeral(country.recovered).format(\"0.0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths:{numeral(country.deaths).format(\"0.0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from \"react\";\r\nimport \"./Map.css\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { ShowDataOnMap } from \"./utils\";\r\nfunction Map({ countries,casesType,center, zoom }) {\r\n  return (\r\n    <div className=\"map_box\">\r\n      <LeafletMap className=\"map\"  center={center} zoom={zoom}>\r\n        {/* url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n           attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' /> */}\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {ShowDataOnMap(countries,casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\nexport default function Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({ country, cases }) => (\r\n        <tr>\r\n          <td>{country}</td>\r\n          <td>\r\n            <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\nconst buildChartData = (data, casestype) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  console.log(data,casestype);\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint && data[casestype][date]!==0) {\r\n      let newDatapoint = {\r\n        x: date,\r\n        y: data[casestype][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDatapoint);\r\n    }\r\n    lastDataPoint = data[casestype][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({casestype,...props}) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n      return  response.json();\r\n        })\r\n        .then((data) => {\r\n          console.log(data);\r\n          let chartData = buildChartData(data, casestype);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [casestype]);\r\n  return (\r\n    <div className={props.className}>\r\n           {data?.length > 0 && (  \r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                // backgroundColor: \"rgba(204,16,52,0.5)\",\r\n                data: data,\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                // backgroundColor: [\r\n                //     'rgba(255, 99, 132, 0.2)'],\r\n                fill: true,\r\n                borderColor: \"#CC1034\",\r\n              \r\n              },\r\n            ],\r\n          }}\r\n        />\r\n        )}\r\n    </div>\r\n  );\r\n}\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport InfoBox from \"./InfoBox\";\r\nimport {\r\n  MenuItem,\r\n  FormControl,\r\n  Select,\r\n  Card,\r\n  CardContent,\r\n  colors,\r\n} from \"@material-ui/core\";\r\nimport Map from \"./Map\";\r\nimport Table from \"./Table\";\r\nimport { prettyPrintStat, sortData } from \"./utils\";\r\nimport LineGraph from \"./LineGraph\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nfunction App() {\r\n  const [countries, setCountries] = useState([]);\r\n  const [country, setCountry] = useState(\"worldwide\");\r\n  const [countryInfo, setcountryInfo] = useState({});\r\n  const [tableData, setTableData] = useState([]);\r\n  const [mapCountries, setMapCountries] = useState([]);\r\n  // const [mapcenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\r\n  // const [mapZoom, setMapzoom] = useState(3);\r\n\r\n  const [mapcenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\r\n  const [mapZoom, setMapzoom] = useState(-1);\r\n  const [casesType, setCaseType] = useState(\"cases\");\r\n\r\nuseEffect(()=>{\r\n  fetch('https://disease.sh/v3/covid-19/all')\r\n    .then(res => res.json())\r\n    .then(data =>{\r\n       setcountryInfo(data);\r\n})\r\n},[]);\r\n\r\n  //state=> write a variable  in react\r\n  //useeffect run a piece of code based on a given codition\r\n  useEffect(() => {\r\n    //async =>sending ,wait for it ,do something info\r\n    const getCountriesData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const countries = data.map((country) => ({\r\n            name: country.country,\r\n            value: country.countryInfo.iso2,\r\n          }));\r\n          const sortedData = sortData(data);\r\n          setTableData(sortedData);\r\n          setMapCountries(data);\r\n          setCountries(countries);\r\n        });\r\n    };\r\n    getCountriesData();\r\n    // onCountryChange({target:{Event:\"worldwide\"}});\r\n  }, []);\r\n\r\n  const onCountryChange = async (event) => {\r\n    const countrycode = event.target.value;\r\n    console.log(\"countrycode\", countrycode);\r\n    setCountry(countrycode);\r\n    const url =\r\n      countrycode === \"worldwide\"\r\n        ? \"https://disease.sh/v3/covid-19/all\"\r\n        : `https://disease.sh/v3/covid-19/countries/${countrycode}`;\r\n\r\n    await fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setcountryInfo(countrycode);\r\n\r\n        setcountryInfo(data);\r\n        if(countrycode!==\"worldwide\")\r\n        {\r\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\r\n        setMapzoom(4);\r\n      }else{\r\n        setMapzoom(1);\r\n      }\r\n\r\n      });\r\n  };\r\n  // console.log(data)\r\n\r\n  // console.log(\"info:\", countryInfo);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"app_left\">\r\n        <div className=\"app_header\">\r\n          <h1> COVID - 19 - TRACKER </h1>\r\n          <FormControl className=\"app_dropdown\">\r\n            <Select\r\n              variant=\"outlined\"\r\n              value={country}\r\n              onChange={onCountryChange}\r\n            >\r\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\r\n              {countries.map((country) => (\r\n                <MenuItem value={country.value}>{country.name}</MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n        {/* Header*/} {/* Title+ Select input dropdown field*/}\r\n        {/* InfoBoxes*/}\r\n        <div className=\"app_status\">\r\n          <InfoBox\r\n         \r\n            isRed\r\n          active={casesType ===\"cases\"}\r\n            onClick={(_e) => setCaseType(\"cases\")}\r\n            title=\"Coronavirus Cases\"\r\n            cases={prettyPrintStat(countryInfo.todayCases)}\r\n            total={countryInfo.cases}\r\n          />\r\n          <InfoBox\r\n            active={casesType ===\"recovered\"}\r\n            onClick={(_e) => setCaseType(\"recovered\")}\r\n            title=\"Recovered\"\r\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\r\n            total={countryInfo.recovered}\r\n          ></InfoBox>\r\n          <InfoBox\r\n           isRed\r\n           active={casesType ===\"deaths\"}\r\n            onClick={(_e) => setCaseType(\"deaths\")}\r\n            title=\"Deaths\"\r\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\r\n            total={countryInfo.deaths}\r\n          ></InfoBox>\r\n        </div>\r\n        {/* Map*/}\r\n        <Map\r\n          casesType={casesType}\r\n          countries={mapCountries}\r\n          center={mapcenter}\r\n          zoom={mapZoom}\r\n        />\r\n      </div>\r\n      <Card className=\"app_right\">\r\n        {/* Table*/}\r\n        {/* Graph*/}\r\n        <CardContent>\r\n          <h3>Live Cases by country</h3>\r\n          <Table countries={tableData} />\r\n          <h3 className=\"app_graphtitle\">Worldwide new cases {casesType}</h3>\r\n          <LineGraph className=\"app_graph\" casestype={casesType}/>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n// onChange={e => setCountry(e.target.value)}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}